[tool.poetry]
name = "sqlacodegen"
version = "0.0.0"  # We'll use dynamic versioning
description = "Automatic model code generator for SQLAlchemy"
authors = ["Alex Gr√∂nholm <alex.gronholm@nextday.fi>"]
license = "MIT"
readme = "README.rst"
homepage = "https://github.com/agronholm/sqlacodegen"
repository = "https://github.com/agronholm/sqlacodegen"
keywords = ["sqlalchemy"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Environment :: Console",
    "Topic :: Database",
    "Topic :: Software Development :: Code Generators",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]

[tool.poetry.dependencies]
python = "^3.12"
SQLAlchemy = "^2.0.23"
inflect = "^4.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4"
coverage = "^7.0"
psycopg2-binary = "*"
mysql-connector-python = "*"
ruff = "^0.5.2"
mypy = "^1.10.1"

[tool.poetry.group.sqlmodel.dependencies]
sqlmodel = "^0.0.12"

[tool.poetry.group.citext.dependencies]
sqlalchemy-citext = "^1.7.0"

[tool.poetry.group.geoalchemy2.dependencies]
geoalchemy2 = "^0.11.1"

[tool.poetry.group.pgvector.dependencies]
pgvector = "^0.2.4"

[tool.poetry.scripts]
sqlacodegen = "sqlacodegen.cli:main"

[tool.poetry.plugins."sqlacodegen.generators"]
tables = "sqlacodegen.generators:TablesGenerator"
declarative = "sqlacodegen.generators:DeclarativeGenerator"
dataclasses = "sqlacodegen.generators:DataclassGenerator"
sqlmodels = "sqlacodegen.generators:SQLModelGenerator"
aware = "sqlacodegen.generators:AwareGenerator"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "pep440"

[tool.ruff]
line-length = 90
src = ["src"]

[tool.ruff.lint]
select = [
    "E", "F", "W",  # default Flake8
    "I",            # isort
    "ISC",          # flake8-implicit-str-concat
    "PGH",          # pygrep-hooks
    "RUF100",       # unused noqa (yesqa)
    "UP",           # pyupgrade
]

[tool.mypy]
strict = true  # Enables strict type checking mode

# Ignoring bunch of stuff that I do not want to fix now..
ignore_missing_imports = true
follow_imports = "skip"
warn_unused_ignores = true

# Suppress specific errors
disable_error_code = [
    "no-any-return",  # Ignore returning Any from functions
    "var-annotated",  # Ignore missing type annotations for variables
    "no-untyped-def",  # Ignore missing type annotations for functions
    "no-untyped-call"  # Ignore calls to untyped functions
]

[[tool.mypy.overrides]]
module = "inflect"
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = "-rsx --tb=short"
testpaths = ["tests"]

[tool.coverage.run]
source = ["sqlacodegen"]
relative_files = true

[tool.coverage.report]
show_missing = true